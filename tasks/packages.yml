---
- name: Packages on Windows
  when: ansible_system == "Windows"
  block:
    - name: Select optional features
      set_fact:
        optional_features: >-
          {{
            (os_family_defaults | default({})).optional_features | default({})
            | combine(optional_features | default({}), recursive=True)
          }}

    - name: Update Windows optional features
      ansible.windows.win_optional_feature:
        name: "{{ optional_feature.key }}"
        state: "{{ 'present' if optional_feature.value else 'absent' }}"
        include_parent: true
      loop: "{{ optional_features | dict2items }}"
      loop_control:
        loop_var: optional_feature
      register: optional_feature_result

    - name: Check for system package updates
      ansible.windows.win_updates:
        state: searched

    - name: Select system packages
      set_fact:
        optional_features: >-
          {{
            (os_family_defaults | default({})).system_packages | default([])
            + (system_packages | default([]))
          }}

    - name: Update system packages
      ansible.windows.win_updates:
        category_names: "{{ system_packages | default(omit) }}"
        reboot: true
      register: system_update_result
      until: system_update_result.found_update_count == 0

    - name: Select software packages
      set_fact:
        software_packages: >-
          {{
            (os_family_defaults | default({})).software_packages | default({})
            | combine(software_packages | default({}), recursive=True)
          }}

    - name: "Remove '{{ item.key | default(item) }}"
      loop: "{{ packages | dict2items | selectattr('value', 'falsy') }}"
      ansible.windows.win_package:
        product_id: "{{ item.key }}"
        state: absent

    - name: "Update package {{ item.key }} to {{ ' v' + item.value if item.value is string else 'latest' }}"
      loop: "{{ packages | dict2items | selectattr('value', 'truthy') }}"
      register: package_update_result
      ansible.windows.win_powershell:
        parameters:
          AppId: item.key
          Version: "{{ item.value if item.value is string else omit }}"
        script: |
          [CmdletBinding(SupportsShouldProcess)]
          param (
            [String]
            $AppId,

            [String]
            $Version = $null
          )

          $Ansible.Changed = $false
          $before_version = (winget list --id $app --source winget --exact | Select-String -Pattern $app) -split '\s{2,}')[2]
          $before_pin = ((winget pin list --id $AppId --source winget --exact | Select-String -Pattern $app) -split '\s{2,}')[5]
          $Ansible.Result = [PSCustomObject]@{
            before_version = $before_version
            version = $null
            before_pin = $before_pin
            pin = $null
            reboot_required = $false
          }

          if ($Version) {
            if ($Version -eq $before_pin) {
              $Ansible.Result.pin = $before_pin
            } else {
              if ($PSCmdlet.ShouldProcess('target')) {
                winget pin add --source winget --id $AppId --exact --version $Version --force
              }
              $Ansible.Changed = $true
              $Ansible.Result.pin = $Version
            }
          } elseif ($before_pin) {
            if ($PSCmdlet.ShouldProcess('target')) {
              winget pin remove --source winget --id $app --exact
            }
            $Ansible.Changed = $true
          }

          if ($before_version -eq $Version) {
            $Ansible.Result.version = $before_version
          } else {
            if ($PSCmdlet.ShouldProcess('target')) {
              $action = if ($before_version) { "upgrade" } else { "install" }

              $process = Start-Process winget -ArgumentList @(
                $action,
                "--accept-package-agreements",
                "--accept-source-agreements",
                "--silent",
                "--source", "winget",
                "--id", $AppId,
                "--exact"
              ) -Wait -PassThru

              $Ansible.Result.reboot_required = $process.ExitCode -eq 3010
            }

            $Ansible.Changed = $true
          }

    - name: Print diagnostics
      ansible.builtin.debug: "{{ package_update_result }}"
      when: diagnostics

    - name: Update Visual Studio modules
      ansible.windows.win_dsc:
        resource_name: Microsoft.VisualStudio.DSC/VSComponents
        ProductId: Microsoft.VisualStudio.Product.BuildTools
        ChannelId: VisualStudio.17.Release
        Components:
          - Microsoft.VisualStudio.Workload.VCTools
          - Microsoft.VisualStudio.Component.VC.Tools.x86.x64
          - Microsoft.VisualStudio.Component.Windows11SDK.22621

    - name: VC++ in PATH
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding(SupportsShouldProcess)]
          param ()

          $msvcBase = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC"
          $latestVersion = Get-ChildItem -Path $msvcBase | Sort-Object Name -Descending | Select-Object -First 1
          $msvcBinPath = Join-Path -Path $latestVersion.FullName -ChildPath "bin\HostX64\x64"
          $beforePath = [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine) -split ';'
          $afterPath = $beforePath.Clone()
          if ($beforePath -contains $msvcBinPath.ToLower()) {
            $Ansible.Changed = $false
          } else {
            $afterPath += $msvcBinPath

            if ($PSCmdlet.ShouldProcess('target')) {
              [System.Environment]::SetEnvironmentVariable('Path', $afterPath -join ';', [System.EnvironmentVariableTarget]::Machine)
            }
          }

          $Ansible.Result = [PSCustomObject]@{
            before_path = $beforePath
            path = $afterPath
          }

    - name: Install fonts
      register: fonts_result
      loop: "{{ fonts }}"
      ansible.windows.win_powershell:
        parameters:
          FontName: item
          Present: true
        script: |
          [CmdletBinding(SupportsShouldProcess)]
          param (
            [String]
            $FontName,

            [Switch]
            $Present
          )

          # Check if the font is installed
          Add-Type -AssemblyName System.Drawing
          $fonts = (New-Object System.Drawing.Text.InstalledFontCollection).Families
          $fontExists = $fonts | Where-Object { $_.Name -eq $fontName }

          if (-not $fontExists -and $Present) {
            try {
              $null = Get-InstalledModule -Name NerdFonts -ErrorAction Stop
            } catch {
              if ($PSCmdlet.ShouldProcess('target')) {
                Install-Module -Name NerdFonts -Repository PSGallery -Force -Scope AllUsers
              }
            }

            if ($PSCmdlet.ShouldProcess('target')) {
              Import-Module NerdFonts
              $baseFontName = $FontName -replace '\s+Nerd\s+Font$', ''
              Install-NerdFont -Name $baseFontName -Scope AllUsers
            }
          } elseif ($fontExists -and -not $Present) {
            if ($PSCmdlet.ShouldProcess('target')) {
              Uninstall-Font -Name $FontName
            }
          } else {
            $Ansible.Changed = $false
          }

    - name: Reboot if optional features require it
      ansible.windows.win_reboot:
      when: >
        (optional_feature_result.results | selectattr('reboot_required') | list | length > 0) or
        (system_update_result.reboot_required | default(false)) or
        (package_update_results.results | selectattr('reboot_required') | list | length > 0)

